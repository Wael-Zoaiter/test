{"version":3,"sources":["components/Stepper.js","components/forms/InterestsForm.js","components/forms/InfoForm.js","components/forms/ProInfoForm.js","views/Signup.js","App.js","serviceWorker.js","actions/index.js","reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","HorizontalLabelPositionBelowStepper","props","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","activeStep","setActiveStep","steps","arguments","length","undefined","getSteps","titles","react_default","a","createElement","className","Stepper","alternativeLabel","map","label","Step","key","StepLabel","Typography","Button","onClick","getStepContent","content","disabled","prevActiveStep","variant","color","InterestsForm","class","Component","InfoForm","ProInfoForm","Signup","App","href","Signup_Signup","Boolean","window","location","hostname","match","initState","combineReducers","main","state","action","type","payload","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53516bd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '90%',\r\n  },\r\n  backButton: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps(stepsTitle = ['Select master blaster campaign settings', 'Create an ad group', 'Create an ad']) {\r\n  return stepsTitle;\r\n}\r\n\r\nfunction getStepContent(stepContent = 'Content unavailable') {\r\n    return stepContent;\r\n}\r\n\r\nexport default function HorizontalLabelPositionBelowStepper(props) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const steps = getSteps(props.titles);\r\n\r\n  function handleNext() {\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n  }\r\n\r\n  function handleBack() {\r\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n  }\r\n\r\n  function handleReset() {\r\n    setActiveStep(0);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep} alternativeLabel>\r\n        {steps.map(label => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>All steps completed</Typography>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {getStepContent(props.content[activeStep])}\r\n            <div>\r\n              <Button\r\n                disabled={activeStep === 0}\r\n                onClick={handleBack}\r\n                className={classes.backButton}\r\n              >\r\n                Back\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class InterestsForm extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"interests-form\">\r\n                InterestsForm\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class InfoForm extends Component {\r\n    render() {\r\n        return (\r\n            <div>InfoForm</div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ProInfoForm extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                ProInfoForm\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Stepper from '../components/Stepper';\r\nimport { InterestsForm, InfoForm, ProInfoForm } from '../components/forms';\r\n\r\nexport default class Signup extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"signup page\">\r\n                <Stepper \r\n                    titles={[\r\n                        'Career Interests',\r\n                        'General Info',\r\n                        'Professional Info'\r\n                    ]}\r\n                    content={[\r\n                        InterestsForm,\r\n                        InfoForm,\r\n                        ProInfoForm\r\n                    ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport Signup from './views/Signup';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <a href='/other.html'>other page</a>\n      <Signup />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const GET_USER = 'GET_USER';\r\n\r\nexport {\r\n    GET_USER\r\n};","import { combineReducers } from 'redux';\r\nimport {\r\n    GET_USER\r\n} from '../actions';\r\n\r\nconst initState = {};\r\n\r\nconst main = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case GET_USER:\r\n            return {\r\n                payload: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default combineReducers({ main });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}